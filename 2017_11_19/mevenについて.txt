mevenの説明
--必須--
・mevenの概要
・利用する場合のメリット・デメリット
・pom.xmlの書き方
	repositoryes
		dependencies
				scope
					build
							plugins
							
							
							
--できれば---
・antとの比較
・Eclipceにおけるmevenのプラグインの役割り

具体例をまじ和得るなどして相手わかるように説明する


----------------------------------------------------------------------

■mevenの概要
・プロジェクト
Apache Mavenは、ソフトウェアプロジェクトの管理ツール
javaプログラムをビルドするためのツールのこと


■メリット・デメリット
・メリット
①設定ファイル(pom.xml)を配布することで全員が同じライブラリを取得することが出来る。つまりライブラリの共有が確実になる
※pom.xmlを同じものにしておけば古いバージョンから取得することや必要なライブラリが足りないなどが防げる
②公開されているライブラリを取得可能(https://mvnrepository.com/)
※ルールにのっとり記載することで公開されているライブラリを取得することが出来る。
④非公開用のリポジトリを作成することで、そこから取得できるので、各々ダウンロードして共有などの手間が省ける
※pom.xmlに記載することで、必要なライブラリをいちいちSVNからチェックアウトしてビルドを通すなどせずに使用できる。
⑤デプロイが自動化できる
※

・デメリット
①pom.xmlの管理が必要
※新規ライブラリを使用した際、pom.xmlを更新しないとエラーが出る

■pom.cmlの書き方
・repositories
一般公開されているリポジトリ(セントラルリポジトリ)とは違い、会社内などで使用するリポジトリを使用する際に記載する。
※具体的には社内のリポジトリに登録しているライブラリを取得する際に記載の必要がある。
【書き方】
<project>
    <repositories>
        <repository>
	<id><識別子（分かるように付ける）/id>
	<name>リポジトリの名前（わかる名前を付ける）</name>
	<url>リポジトリのURL（必須-ここが違うことで正しく取得できなくなる）</url>
        </repository>
    </repositories>
</project>

・dependencies
プロジェクトに依存するライブラリを取得するために記載する
※必要なライブラリを使用するのに使われる。例えばJunitを使用したい場合はJunitの依存性を解決するために記載するなど
【書き方】
<project>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>

※groupId, artifactId, versionは依存するライブラリのものを使用する

・scope
依存するライブラリをいつクラスパスに追加するか指定するもの
※dependencyの子要素として使用することが出来る

【scopeに指定できる内容】
compile	scope の指定を省略した場合のデフォルト値です。全ての状況でクラスパスに追加されます。
provided	ライブラリが JDK やコンテナによって提供される場合に指定します。コンパイル時のみクラスパスに追加されます。
runtime	実行時のみに必要な場合に指定します。テストの実行および通常の実行のときにクラスパスに追加されます。
test	テストのときのみ必要な場合に指定します。テストのコンパイルと実行のときにクラスパスに追加されます。
system	明示的にクラスパスに追加する場合に指定します。このスコープのライブラリは常に有効であるとみなされ、リポジトリの検索は行われません。

・build
<build></buil>内にプラグインの設定を行う
※実際に使用用途不明


・plugins
ビルドの設定を記載するのに使用される（mevenの公式サイトから必要な設定を調べて記載する）
http://maven.apache.org/plugins/
※使用例はコンパイル時のバージョンを設定するために使用されたりしている。

【書き方】コンパイル時にバージョンを指定する
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
            <source>1.5</source>
            <target>1.5</target>
        </configuration>
</plugin>
